name: 🔧 Sub-task
description: 세부 작업을 위한 Sub-task 이슈
title: "[SUB-TASK] "
labels: ["sub-task"]
projects: ["day-by-spring"]
body:
  - type: markdown
    attributes:
      value: |
        # 🔧 Sub-task Issue Template
        
        Task를 더 작은 단위로 나눈 세부 작업을 정의하고 관리하기 위한 템플릿입니다.
        Sub-task는 일반적으로 몇 시간 내에 완료할 수 있는 단위 작업입니다.

  - type: input
    id: subtask-title
    attributes:
      label: "📋 Sub-task 제목"
      description: "Sub-task의 명확한 제목을 입력하세요"
      placeholder: "예: 기본 필드 및 어노테이션 구현"
    validations:
      required: true

  - type: input
    id: parent-task
    attributes:
      label: "⚙️ 상위 Task"
      description: "이 Sub-task가 속하는 Task 번호를 입력하세요"
      placeholder: "예: #25"
    validations:
      required: true

  - type: dropdown
    id: domain
    attributes:
      label: "🏢 도메인"
      description: "Sub-task가 속하는 도메인을 선택하세요"
      options:
        - member
        - book
        - order
        - loan
        - payment
        - statistics
        - system
        - infrastructure
    validations:
      required: true

  - type: dropdown
    id: layer
    attributes:
      label: "🏗️ 레이어"
      description: "Sub-task가 속하는 아키텍처 레이어를 선택하세요"
      options:
        - entity
        - repository
        - service
        - controller
        - config
        - exception
        - dto
        - util
        - test
    validations:
      required: true

  - type: dropdown
    id: priority
    attributes:
      label: "🔥 우선순위"
      description: "Sub-task의 우선순위를 선택하세요"
      options:
        - critical
        - high
        - medium
        - low
    validations:
      required: true

  - type: dropdown
    id: work-type
    attributes:
      label: "🔧 작업 유형"
      description: "Sub-task의 유형을 선택하세요"
      options:
        - coding
        - testing
        - refactoring
        - documentation
        - configuration
        - validation
        - review
    validations:
      required: true

  - type: textarea
    id: subtask-description
    attributes:
      label: "📝 Sub-task 설명"
      description: "Sub-task의 구체적인 작업 내용을 설명하세요"
      placeholder: |
        ## 작업 내용
        - 이 Sub-task에서 수행할 구체적인 작업을 설명하세요
        
        ## 구현 방법
        - 어떻게 구현할지 간략히 설명하세요
        
        ## 주의사항
        - 구현 시 주의할 점이나 고려사항을 나열하세요
    validations:
      required: true

  - type: textarea
    id: implementation-code
    attributes:
      label: "💻 구현 코드 예시"
      description: "구현할 코드의 예시나 스케치를 제공하세요"
      placeholder: |
        ```java
        @Entity
        @Table(name = "member")
        public class Member {
            @Id
            @GeneratedValue(strategy = GenerationType.IDENTITY)
            private Long id;
        
            @Column(nullable = false, unique = true, length = 100)
            private String email;
        
            @Column(nullable = false, length = 50)
            private String name;
        
            @Enumerated(EnumType.STRING)
            @Column(nullable = false)
            private MembershipType membershipType;
        }
        ```

  - type: textarea
    id: completion-criteria
    attributes:
      label: "✅ 완료 조건"
      description: "Sub-task가 완료되었다고 판단할 수 있는 구체적인 조건들"
      placeholder: |
        - [ ] 기본 필드 정의 (id, email, name, membershipType)
        - [ ] JPA 어노테이션 적용 (@Entity, @Table, @Id, @Column)
        - [ ] 테이블명 및 컬럼명 설정
        - [ ] 제약조건 설정 (nullable, unique, length)
        - [ ] Lombok 어노테이션 적용 (@Data, @Builder 등)
        - [ ] 컴파일 에러 없음
        - [ ] 기본 생성자/빌더 패턴 동작 확인
    validations:
      required: true

  - type: input
    id: estimated-effort
    attributes:
      label: "⏱️ 예상 소요시간"
      description: "Sub-task 완료까지 예상되는 시간 (예: 2시간, 30분)"
      placeholder: "예: 2시간"

  - type: textarea
    id: file-changes
    attributes:
      label: "📁 변경 대상 파일"
      description: "이 Sub-task에서 생성하거나 수정할 파일들"
      placeholder: |
        ## 신규 생성
        - `src/main/java/com/example/spring/entity/Member.java`
        
        ## 수정
        - `src/main/resources/application.yml` (필요시)
        
        ## 테스트
        - `src/test/java/com/example/spring/entity/MemberTest.java`

  - type: textarea
    id: test-scenarios
    attributes:
      label: "🧪 테스트 시나리오"
      description: "이 Sub-task 완료 후 확인해야 할 테스트 시나리오"
      placeholder: |
        ## 단위 테스트
        - [ ] Member 객체 생성 테스트
        - [ ] 빌더 패턴 동작 테스트
        - [ ] 필드 검증 테스트
        
        ## 통합 테스트
        - [ ] JPA 어노테이션 동작 확인
        - [ ] 데이터베이스 테이블 생성 확인
        - [ ] 제약조건 적용 확인

  - type: textarea
    id: dependencies
    attributes:
      label: "🔗 의존성"
      description: "이 Sub-task가 의존하는 다른 Sub-task나 외부 요소들"
      placeholder: |
        ## 선행 Sub-task
        - 없음 (첫 번째 Sub-task)
        
        ## 외부 의존성
        - Spring Data JPA 설정 완료
        - 데이터베이스 연결 설정 완료
        - Lombok 라이브러리 추가

  - type: dropdown
    id: difficulty
    attributes:
      label: "⭐ 난이도"
      description: "Sub-task의 기술적 난이도를 선택하세요"
      options:
        - easy
        - medium
        - hard
    validations:
      required: true

  - type: textarea
    id: notes
    attributes:
      label: "📝 추가 참고사항"
      description: "구현 시 참고할 문서나 예시 코드 링크 등"
      placeholder: |
        ## 참고 문서
        - JPA 어노테이션 가이드: [링크]
        - 프로젝트 코딩 컨벤션: [링크]
        
        ## 예시 코드
        - 기존 Entity 클래스: `src/main/java/com/example/spring/entity/Book.java`